#include "lcd.h"
#include "stm32l476xx.h"
#include <stdint.h>

/* =========================================================================
                                 LCD MAPPING
   =========================================================================
   The LCD supports six 14-segment digits and 4 bars.

   The mapping for each digit is:

        1       2       3       4       5       6
   -----   -----   -----   -----   -----   -----
   |\|/| o |\|/| o |\|/| o |\|/| o |\|/|   |\|/|   BAR3
   -- --   -- --   -- --   -- --   -- --   -- --   BAR2
   |/|\| o |/|\| o |/|\| o |/|\| o |/|\|   |/|\|   BAR1
   ----- * ----- * ----- * ----- * -----   -----   BAR0

   Each character is mapped as follows:

    -----A-----
    |\   |   /|   COL |_|
    F H  J  K B
    |  \ | /  |        _
    --G-- --M--   COL |_|
    |  / | \  |
    E Q  P  N C
    |/   |   \|        _
    -----D-----   DP  |_|
*/

/* Lookup table for capital letters 'A' -> 'Z' */
const uint16_t CapLetterMap[26] = {
    0xFE00, 0x6714, 0x1D00, 0x4714, 0x9D00, 0x9C00, 0x3F00, 0xFA00, 0x0014,
    0x5300, 0x9841, 0x1900, 0x5A48, 0x5A09, 0x5F00, 0xFC00, 0x5F01, 0xFC01,
    0xAF00, 0x0414, 0x5B00, 0x18C0, 0x5A81, 0x00C9, 0x0058, 0x05C0
};

/* Lookup table for digits '0' -> '9' */
const uint16_t NumberMap[10] = {
    0x5F00, 0x4200, 0xF500, 0x6700, 0xEA00, 0xAF00, 0xBF00, 0x4600, 0xFF00, 0xEF00
};

/* Macros for setting/resetting LCD bars */
uint8_t t_bar[2] = {0x00, 0x00};

#define BAR0_ON  (t_bar[1] |= 8)
#define BAR0_OFF (t_bar[1] &= ~8)
#define BAR1_ON  (t_bar[0] |= 8)
#define BAR1_OFF (t_bar[0] &= ~8)
#define BAR2_ON  (t_bar[1] |= 2)
#define BAR2_OFF (t_bar[1] &= ~2)
#define BAR3_ON  (t_bar[0] |= 2)
#define BAR3_OFF (t_bar[0] &= ~2)

#define DOT        ((uint16_t) 0x8000) /* Decimal point */
#define DOUBLE_DOT ((uint16_t) 0x4000) /* Colon */

/* Special Character Codes */
#define C_OPENPARMAP  ((uint16_t) 0x0028)  /* '(' */
#define C_CLOSEPARMAP ((uint16_t) 0x0011)  /* ')' */
#define C_DMAP        ((uint16_t) 0xF300)  /* 'd' */
#define C_MMAP        ((uint16_t) 0xB210)  /* 'm' */
#define C_NMAP        ((uint16_t) 0x2210)  /* 'n' */
#define C_UMAP        ((uint16_t) 0x6084)  /* Space */
#define C_STAR        ((uint16_t) 0xA0DD)  /* '*' */
#define C_MINUS       ((uint16_t) 0xA000)  /* '-' */
#define C_PLUS        ((uint16_t) 0xA014)  /* '+' */
#define C_SLATCH      ((uint16_t) 0x00C0)  /* '/' */
#define C_PERCENT_1   ((uint16_t) 0xEC00)  /* '%' part 1 */
#define C_PERCENT_2   ((uint16_t) 0xB300)  /* '%' part 2 */
#define C_FULL        ((uint16_t) 0xFFDD)  /* Full display */

/* ===================================================================
                        FUNCTION IMPLEMENTATION
   =================================================================== */

/**
 * @brief  Initializes GPIO pins for LCD functionality.
 */
void LCD_PIN_Init(void) {
    /* Enable GPIO clocks */
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN | RCC_AHB2ENR_GPIOBEN | RCC_AHB2ENR_GPIOCEN | RCC_AHB2ENR_GPIODEN;

    /* Configure GPIOA */
    GPIOA->MODER &= 0x3FC00FFF;
    GPIOA->MODER |= 0x802AA000;

    /* Configure GPIOB */
    GPIOB->MODER &= 0x00F3F0F0;
    GPIOB->MODER |= 0xAA080A0A;

    /* Configure GPIOC */
    GPIOC->MODER &= 0xFFFC003F;
    GPIOC->MODER |= 0x0002AA80;

    /* Configure GPIOD */
    GPIOD->MODER &= 0x0000FFFF;
    GPIOD->MODER |= 0xAAAA0000;
}

/**
 * @brief  Configures LCD settings such as bias, duty cycle, contrast.
 */
void LCD_Configure(void) {
    LCD->CR &= ~LCD_CR_LCDEN;

    /* Configure LCD bias and duty cycle */
    LCD->CR &= ~(0x03 << 5);
    LCD->CR |= (0x02 << 5);  // 1/3 bias
    LCD->CR &= ~(0x07 << 2);
    LCD->CR |= (0x03 << 2);  // 1/4 duty

    /* Set contrast and voltage */
    LCD->FCR |= LCD_FCR_CC | LCD_FCR_PON;
    LCD->CR &= ~LCD_CR_VSEL;

    /* Enable LCD */
    while ((LCD->SR & LCD_SR_FCRSR) == 0);
    LCD->CR |= LCD_CR_LCDEN;
    while ((LCD->SR & LCD_SR_ENS) == 0);
}

/**
 * @brief  Initializes LCD: GPIOs, Clock, and LCD settings.
 */
void LCD_Initialization(void) {
    LCD_PIN_Init();
    LCD_Clock_Init();
    LCD_Configure();
    LCD_Clear();
}

/**
 * @brief  Clears the LCD display.
 */
void LCD_Clear(void) {
    while ((LCD->SR & LCD_SR_UDR) != 0);
    for (uint8_t i = 0; i < 15; i++) {
        LCD->RAM[i] = 0;
    }
    LCD->SR |= LCD_SR_UDR;
}

/**
 * @brief  Writes a character to the LCD frame buffer.
 */
void LCD_WriteChar(uint8_t *ch, bool point, bool colon, uint8_t position) {
    uint8_t digit[4];

    /* Convert character to LCD segment format */
    LCD_Conv_Char_Seg(ch, point, colon, digit);

    while ((LCD->SR & LCD_SR_UDR) != 0);

    /* Store character in LCD RAM */
    for (uint8_t i = 0; i < 4; i++) {
        LCD->RAM[position * 2 + i] |= digit[i];
    }

    LCD->SR |= LCD_SR_UDR;
}

/**
 * @brief  Displays a string on the LCD.
 */
void LCD_DisplayString(uint8_t *ptr) {
    for (uint8_t i = 0; i < 6; i++) {
        LCD_WriteChar(ptr++, 0, 0, i);
    }
}

/**
 * @brief  Displays a preset name on the LCD.
 */
void LCD_Display_Name(void) {
    while ((LCD->SR & LCD_SR_UDR) != 0);
    LCD_DisplayString((uint8_t *)"SENERE");
    LCD->SR |= LCD_SR_UDR;
}
